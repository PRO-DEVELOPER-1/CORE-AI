import fetch from 'node-fetch';
import path from 'path';
import { promises as fs } from 'fs';

const __filename = new URL(import.meta.url).pathname;
const __dirname = path.dirname(__filename);

async function isOwner(msg, conn) {
  const botNumber = conn.user.id.split(':')[0].replace(/\D/g, '');
  const senderNumber = msg.sender.split(':')[0].replace(/\D/g, '');
  return senderNumber === botNumber;
}

const imageGen = async (msg, conn) => {
  const text = msg.body.trim();
  const lowerText = text.toLowerCase();

  // Check for trigger words
  if (!/^(image|create|img)\b/i.test(lowerText)) return;

  // Check if prompt is included
  const prompt = text.replace(/^(image|create|img)\s*/i, '');
  if (!prompt) {
    await conn.sendMessage(msg.from, {
      text: 'Please provide a prompt to generate the image.'
    }, { quoted: msg });
    return;
  }

  await msg.react('üé®');

  try {
    const apiUrl = `https://vapis.my.id/api/txt2imgv3?q=${encodeURIComponent(prompt)}`;
    const response = await fetch(apiUrl);
    if (!response.ok) throw new Error('Failed to fetch image.');

    const result = await response.json();
    const imageUrl = result.data;

    const imageRes = await fetch(imageUrl);
    const imageBuffer = await imageRes.buffer();

    const thumbnailRes = await fetch('https://files.catbox.moe/pimw8h.jpg');
    const thumbnailBuffer = await thumbnailRes.buffer();

    await conn.sendMessage(msg.from, {
      image: imageBuffer,
      caption: `üñºÔ∏è Here is your generated image for: *${prompt}*`,
      contextInfo: {
        externalAdReply: {
          title: "Cloud AI Image Generator",
          body: "Generated by Cloud AI",
          thumbnail: thumbnailBuffer,
          mediaType: 2,
          renderLargerThumbnail: true,
          sourceUrl: "https://github.com/DEVELOPER-BERA"
        }
      }
    }, { quoted: msg });

    await msg.react('‚úÖ');
  } catch (err) {
    console.error('Error generating image:', err);
    await conn.sendMessage(msg.from, {
      text: '‚ùå Failed to generate image, please try again.'
    }, { quoted: msg });
    await msg.react('‚ùå');
  }
};

export default imageGen;
