import { promises as fs } from 'fs';
import path from 'path';
import fetch from 'node-fetch';

const __filename = new URL(import.meta.url).pathname;
const __dirname = path.dirname(__filename);

const gptStatusFile = path.resolve(__dirname, "../gpt4o_status.json");
const ELEVENLABS_API_KEY = 'sk_f39ceafd9be9faea4c586716d474e28c6e531ecb9e9dda03';
const ELEVENLABS_VOICE_ID = '21m00Tcm4TlvDq8ikWAM';

const apiUrls = [
  "https://api.siputzx.my.id/api/ai/deepseek-llm-67b-chat?content=",
  "https://vapis.my.id/api/gpt4o?q=",
  "https://vapis.my.id/api/gemini?q=",
  "https://vapis.my.id/api/luminai?q="
];

async function isOwner(msg, conn) {
  const botNumber = conn.user.id.split(':')[0].replace(/\D/g, '');
  const senderNumber = msg.sender.split(':')[0].replace(/\D/g, '');
  return senderNumber === botNumber;
}

async function readGptStatus() {
  try {
    const content = await fs.readFile(gptStatusFile, 'utf-8');
    return JSON.parse(content);
  } catch {
    return { enabled: false };
  }
}

async function writeGptStatus(status) {
  try {
    await fs.writeFile(gptStatusFile, JSON.stringify({ enabled: status }, null, 2));
  } catch (err) {
    console.error('Error writing GPT status:', err);
  }
}

const deepseek = async (msg, conn) => {
  const gptStatus = await readGptStatus();
  const text = msg.body.trim();

  if (text.toLowerCase() === "deepseek on" || text.toLowerCase() === "deepseek off") {
    if (!(await isOwner(msg, conn))) {
      await conn.sendMessage(msg.from, { text: "‚ùå Only the owner can toggle AI." }, { quoted: msg });
      return;
    }
    const enable = text.toLowerCase() === "deepseek on";
    await writeGptStatus(enable);
    await conn.sendMessage(msg.from, { text: `‚úÖ AI has been ${enable ? "activated" : "deactivated"}.` }, { quoted: msg });
    return;
  }

  if (!gptStatus.enabled) return;

  await msg.React('üíª');

  let reply = null;

  for (const baseUrl of apiUrls) {
    try {
      const response = await fetch(baseUrl + encodeURIComponent(text));
      if (!response.ok) {
        console.error(`API failed: ${baseUrl}, status: ${response.status}`);
        continue;
      }

      const json = await response.json();
      reply = json.data || json.message;
      if (reply) break;

    } catch (err) {
      console.error(`Error with API ${baseUrl}:`, err);
      continue;
    }
  }

  if (!reply) {
    await conn.sendMessage(msg.from, { text: "‚ùå All AI APIs failed. Please try again later." }, { quoted: msg });
    await msg.React('‚ùå');
    return;
  }

  await conn.sendMessage(msg.from, { text: reply }, { quoted: msg });

  // TTS ElevenLabs with Thumbnail + Footer
  try {
    const audioRes = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${ELEVENLABS_VOICE_ID}`, {
      method: 'POST',
      headers: {
        'xi-api-key': ELEVENLABS_API_KEY,
        'Content-Type': 'application/json',
        'Accept': 'audio/mpeg'
      },
      body: JSON.stringify({
        text: reply,
        model_id: "eleven_multilingual_v2",
        voice_settings: {
          stability: 0.4,
          similarity_boost: 0.75
        }
      })
    });

    if (audioRes.ok) {
      const audioBuffer = await audioRes.buffer();
      await conn.sendMessage(msg.from, {
        audio: audioBuffer,
        mimetype: 'audio/mpeg',
        contextInfo: {
          externalAdReply: {
            title: 'AI Audio Generated',
            body: 'generated by cloud ai',
            thumbnailUrl: 'https://files.catbox.moe/pimw8h.jpg',
            mediaType: 2,
            renderLargerThumbnail: true
          }
        }
      }, { quoted: msg });
    } else {
      console.error("TTS failed.");
    }

    await msg.React('‚úÖ');
  } catch (err) {
    console.error("TTS error:", err);
    await msg.React('‚úÖ');
  }
};

export default deepseek;
